pipeline {
    agent {
        label 'gcp_node'
    }

    environment {
        AWS_ACCOUNT_ID='738917964840'
        AWS_DEFAULT_REGION='ap-southeast-2'
        REPO_IMAGE_NAME='gamera_be'
        REPO_IMAGE_TAG='latest'
        AWS_CREDENTIALS="AWS_CREDENTIAL_JENKINS_CICD"
        AWS_DOCKER_PUSH_ECR_STDIN='AWS_DOCKER_PUSH_ECR_STDIN'
        SPRING_DATASOURCE_URL= 'SPRING_DATASOURCE_URL'
        SPRING_DATASOURCE_USERNAME= 'SPRING_DATASOURCE_USERNAME'
        SPRING_DATASOURCE_PASSWORD= 'SPRING_DATASOURCE_PASSWORD'
    }

    stages {
        stage('git clone') {
            steps {
                echo 'git clone branch'
                checkout([
                    $class: 'GitSCM',
                    branches: [[name: 'GF-267-DevOps/Ron-backend-ECS-ECR']],
                    doGenerateSubmoduleConfigurations: false,
                    extensions: [],
                    submoduleCfg: [],
                    userRemoteConfigs: [[url: 'https://github.com/The-Avengers-Gamera/gamera-be']]
                ])
            }
        }
        stage('build') {
            steps {
                echo 'starts build...'
                sh './gradlew clean build -x test'
            }
        }
        stage('test') {
            steps {
                echo 'starts test....'
                sh './gradlew clean test -x test'
            }
        }
        stage('building image') {
            steps {
                echo 'Building docker images'
                sh 'aws ecr get-login-password --region ${AWS_DEFAULT_REGION} | docker login --username AWS --password-stdin ${AWS_DOCKER_PUSH_ECR_STDIN}'
                sh 'sudo docker build --build-arg SPRING_DATASOURCE_URL=${SPRING_DATASOURCE_URL} --build-arg SPRING_DATASOURCE_USERNAME=${SPRING_DATASOURCE_USERNAME} --build-arg SPRING_DATASOURCE_PASSWORD=${SPRING_DATASOURCE_PASSWORD} -t ${REPO_IMAGE_NAME}:${REPO_IMAGE_TAG} --no-cache .'
            }
        }
        stage('Pushing to ECR') {
            steps {
                echo 'pushing image to ECR'
                sh 'docker tag ${REPO_IMAGE_NAME}:${REPO_IMAGE_TAG} ${AWS_DOCKER_PUSH_ECR_STDIN}/${REPO_IMAGE_NAME}:${REPO_IMAGE_TAG}'
                sh 'docker push ${AWS_DOCKER_PUSH_ECR_STDIN}/${REPO_IMAGE_NAME}:${REPO_IMAGE_TAG}'
            }
        }
        // stage('Deploying to ECS') {
        //     steps {
        //         echo 'deploying image to ECS cluster service'
        //         sh 'aws ecs update-service --cluster gamera_be_cluster --service gamera_be_service --force-new-deployment'
        //     }
        // }
        stage('Clean old Image') {
            steps {
                sh 'docker image ls'
                sh 'docker image prune --force --filter "until=2h"'
                echo "No image to delete..." 
            }
        }
    }
}